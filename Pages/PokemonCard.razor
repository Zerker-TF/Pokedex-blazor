@page "/pokemon/{PokemonId}"
@using PokDex.Models
@using Util
@inject PokeClient client
@using Pokedex.Models



<div class="container">
	<div class="card">

		<div class="sprite-bg">
			<img src="~/img/poke-sprite-bg.png" alt="" />
		</div>

		<div class="sprite">
			@if (pokemon.types.Count > 0)
			{
				<div class="card-top">

					<img src="@pokemon.sprites.front_default" alt="pokemon sprite" />

				</div>

				// if you want pokemon type color for bg  style="background-color: @PokeColor.GetTypeColor(pokemon.types[0].type.name)" add that
			}
		</div>


		<div class="sprite-back">
			@if (pokemon.types.Count > 0)
			{
				<div class="card-top">

					<img src="@pokemon.sprites.back_default" alt="pokemon back sprite" />

				</div>

			}
		</div>

		<div class="shiny-bg">
			<img src="~/img/poke-sprite-shiny-bg.png" alt="" />
		</div>

		<div class="sprite-shiny">
			@if (pokemon.types.Count > 0)
			{
				<div class="card-top">

					<img src="@pokemon.sprites.front_shiny" alt="pokemon shiny sprite" />
					
				</div>


			}
		</div>

		<div class="sprite-shiny-back">
			@if (pokemon.types.Count > 0)
			{
				<div class="card-top">

					<img src="@pokemon.sprites.back_shiny" alt="pokemon shiny sprite" />

				</div>

			}
		</div>





		<div class="stats-head">

			<div class="icon-container">

				<img src="/img/@PokeUtil.GetRandomBall()" alt="" class="poke-icon" />
				<h1 class="pokemon-name card-title">@pokemon.name</h1>



			</div>


			<div class="pokemon-info">

				<div class="pokemon-type">
					@* <h4>Type</h4> *@
					@foreach (var type in pokemon.types)
					{
						<span class="type-badge" style="background-color:@PokeColor.GetTypeColor(type.type.name)">@type.type.name</span>
					}
				</div>

				<div class="pokemon-hw">
					<h5>Height: @PokeUtil.GetPokemonHeightInMeters(pokemon.height) m</h5>
					<h5>Weight: @PokeUtil.GetPokemonWeightInKilograms(@pokemon.weight) kg</h5>
				</div>

			</div>
		</div>

		<div class="stats-values">


			@* <h2>Stats</h2> *@



			@foreach (var stat in pokemon.stats)
			{
				<div class="stat-bar">
					@* <h5 class="stat">@stat.stat.name: @stat.base_stat</h5> *@

					<div class="progress">
						<div class="progress-bar progress-stacked" role="progressbar" style="width: @stat.base_stat%;
								background-color: @PokeColor.GetStatColor(stat.stat.name)" aria-valuenow="100" aria-valuemin="0" aria- valuemax="200">
							@stat.stat.name: @stat.base_stat
						</div>
					</div>

				</div>
			}
		</div>

		<div class="Poke-entry">
			@if (pokemonSpecies != null)
			{
				<p>@PokeUtil.GetRandomFlavorText(pokemonSpecies.flavor_text_entries)</p>	
			}
		</div>

	</div>

</div>

@code {
	[Parameter]

	public string PokemonId { get; set; } = "";


	Pokemon pokemon = new Pokemon();
	PokemonSpecies pokemonSpecies = new PokemonSpecies();


	protected async override Task OnInitializedAsync()
	{
		pokemon = await client.GetPokemon(PokemonId);
		pokemonSpecies = await client.GetPokemonEntry(PokemonId);
	}

	

}
